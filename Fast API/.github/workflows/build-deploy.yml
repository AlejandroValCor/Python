name: Build and Deploy Code

on: [push, pull_request]

jobs:
  build:
    environment:
      name: Testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: "${{secrets.DATABASE_NAME}} - Test"
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    steps:
      - name: Pull Git Repo
        uses: actions/Checkout@v2
      - name: Install Python Version 3.13
        uses: actions/setup-python@v2
        with:
          python-version: "3.13"
      - name: Update Pip
        run: python -m pip install --upgrade pip
      - name: Install all dependencies
        run: pip install -r requirements.txt
      - name: Test with Pytest
        run: |
          pip install pytest
          pytest

      # - name: Extract Docker image metadata
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ vars.DOCKER_USERNAME }}/fastapi-social-media-docker-repository

      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ vars.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v6
      #   with:
      #     push: ${{ github.event_name != 'pull_request' }}
      #     tags: ${{ steps.meta.outputs.tags }}
      #     annotations: ${{ steps.meta.outputs.annotations }}
      #     provenance: true
      #     sbom: true
      
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: Production
    steps:
      - name: Deploy to Ubuntu Server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{secrets.PROD_HOST}}
          username: ${{secrets.PROD_USERNAME}}
          password: ${{secrets.PROD_PASSWORD}}
          script: |
            cd app/src
            git pull
            echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart FastAPI_SMA